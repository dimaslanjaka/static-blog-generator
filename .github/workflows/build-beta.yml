name: Build Beta

on:
  push:
    branches: ['beta']
    paths-ignore:
      - '**/dist/**'
      - '**/release/**'
      - 'packages/google-news-sitemap'
      - 'packages/hexo-post-parser'
      - 'packages/git-command-helper'
      - 'packages/safelinkify'
      - 'packages/hexo-blogger-xml'
      - '**/test/**'
  pull_request:
    types:
      - closed
  workflow_dispatch:

# run single job
concurrency:
  group: build
  cancel-in-progress: true

jobs:
  build:
    strategy:
      fail-fast: true
    env:
      NODE_OPTIONS: '--max-old-space-size=8192'
      YARN_ENABLE_IMMUTABLE_INSTALLS: false
      ACCESS_TOKEN: ${{ secrets.ACCESS_TOKEN }}

    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
        with:
          repository: dimaslanjaka/static-blog-generator
          ref: beta
          token: ${{ secrets.ACCESS_TOKEN }}
          submodules: 'recursive'
      - name: update submodules
        shell: bash
        run: |
          echo "init submodules"
          git submodule init
          git submodule foreach "git submodule init"
          echo "sync submodules"
          git submodule sync
          git submodule foreach "git submodule sync"
          echo "update submodules"
          mkdir -p bin >/dev/null 2>&1
          curl -L https://github.com/dimaslanjaka/bin/raw/master/bin/submodule-install > bin/submodule-install
          rm -rf .git/modules
          bash ./bin/submodule-install
          echo "disable githooks warning"
          git config advice.ignoredHook false

      - name: Set EOL git configs
        continue-on-error: true
        run: |
          git config core.eol lf
          git config core.autocrlf input
          git checkout-index --force --all

      - uses: actions/setup-node@v3
        with:
          node-version: 18.x
          token: ${{ secrets.GITHUB_TOKEN }}
          architecture: x64
          #cache: 'yarn'
          #cache-dependency-path: '**/yarn.lock'

      - name: Enable corepack
        run: |
          corepack enable
          corepack prepare yarn@3.2.0 --activate

      - name: Set env
        id: set-env
        shell: bash
        run: |
          echo "${HOME}/.local/bin" >> $GITHUB_PATH
          echo "${GITHUB_WORKSPACE}/bin" >> $GITHUB_PATH
          echo "${GITHUB_WORKSPACE}/node_modules/.bin" >> $GITHUB_PATH
          echo "GITHUB_SHA_SHORT=$(echo $GITHUB_SHA | cut -c 1-6)" >> $GITHUB_ENV
          echo "GITHUB_SHA_SHORT=$(echo $GITHUB_SHA | cut -c 1-6)" >> $GITHUB_OUTPUT
          echo "GITHUB_BRANCH=${GITHUB_REF#refs/heads/}" >> $GITHUB_ENV
          echo "GITHUB_BRANCH=${GITHUB_REF#refs/heads/}" >> $GITHUB_OUTPUT
          echo "GITHUB_COMMIT_URL=https://github.com/${{github.repository}}/commit/$(echo $GITHUB_SHA)" >> $GITHUB_ENV
          echo "GITHUB_COMMIT_URL=https://github.com/${{github.repository}}/commit/$(echo $GITHUB_SHA)" >> $GITHUB_OUTPUT
          echo "GITHUB_RUNNER_URL=https://github.com/${{github.repository}}/commit/${{github.sha}}/checks/${{github.run_id}}" >> $GITHUB_ENV
          echo "GITHUB_RUNNER_URL=https://github.com/${{github.repository}}/commit/${{github.sha}}/checks/${{github.run_id}}" >> $GITHUB_OUTPUT
          echo "CACHE_NPM=$(npm config get cache)" >> $GITHUB_ENV
          echo "cache-npm=$(npm config get cache)" >> $GITHUB_OUTPUT
          YARN_CURRENT=$(yarn -v)
          YARN_BERRY=3.2.1
          if [[ "ok" == "$(echo | awk "(${YARN_CURRENT} > ${YARN_BERRY}) { print \"ok\"; }")" ]]; then
            echo "CACHE_YARN=$(yarn config get cacheFolder)" >> $GITHUB_ENV
            echo "cache-yarn=$(yarn config get cacheFolder)" >> $GITHUB_OUTPUT
          else
            echo "CACHE_YARN=$(yarn cache dir)" >> $GITHUB_ENV
            echo "cache-yarn=$(yarn cache dir)" >> $GITHUB_OUTPUT
          fi
          echo "architecture=$(getconf LONG_BIT)" >> $GITHUB_ENV

      - name: Get env
        shell: bash
        run: |
          echo "branch      : ${{ env.GITHUB_BRANCH }}"
          echo "commit msg  : ${{ github.event.head_commit.message }}"
          echo "commit hash : ${{ env.GITHUB_SHA_SHORT }}"
          echo "commit url  : ${{ env.GITHUB_COMMIT_URL }}"
          echo "runner url  : ${{ env.GITHUB_RUNNER_URL }}"
          echo "cache npm   : ${{ env.CACHE_NPM }}"
          echo "cache yarn2 : ${{ env.CACHE_YARN2 }}"
        #echo "cache yarn  : ${{ env.CACHE_YARN }}"

      - uses: actions/cache@v3 # pat-s/always-upload-cache@v3.0.11
        id: cache
        name: get caches
        with:
          path: |
            ${{ steps.set-env.outputs.cache-npm }}
            ${{ steps.set-env.outputs.cache-yarn2 }}
          #${{ steps.set-env.outputs.cache-yarn }}
          #./packages/sbg-server/src/public
          #**/tmp/**
          #**/node_modules/**
          #**/.yarn
          key: ${{ runner.os }}-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-${{ hashFiles('**/yarn.lock') }}
            ${{ runner.os }}-

      - name: Install Global Packages
        run: npm i -g typescript ts-node gulp-cli hexo-cli webpack-cli npm-run-all depcheck lerna husky

      - run: yarn install
      - run: |
          arr_variable=("sbg-api" "sbg-server" "sbg-utility" "sbg-cli" "static-blog-generator" "instant-indexing")
          for i in "${arr_variable[@]}"
          do
            yarn workspace $i build && yarn workspace $i run pack
          done
        shell: bash
        name: build
      - run: npx sbg clean all
        working-directory: test
        name: test clean
      - run: npx sbg post standalone
        working-directory: test
        name: test post standalone
      - run: npx sbg post copy
        working-directory: test
        name: test post copy
      - run: npx hexo generate
        working-directory: test
        name: test generate site with hexo
      - run: npx sbg generate feed
        working-directory: test
        name: test generate feed
      - run: npx sbg generate sitemap
        working-directory: test
        name: test generate sitemap
      - run: npx sbg deploy copy
        working-directory: test
        name: test copy generated site to deployment directory
      - run: |
          echo "cached=$(git diff --cached --numstat | wc -l)" >> $GITHUB_OUTPUT
          echo "commits=$(git diff origin/master..HEAD --numstat | wc -l)" >> $GITHUB_OUTPUT
        name: what changes
        id: changes
      - name: show changes
        shell: bash
        run: |
          echo "total staged files ${{ steps.changes.outputs.cached }}"
          echo "total unpushed commits ${{ steps.changes.outputs.commits }}"
      - name: commit and push
        if: steps.changes.outputs.cached > 0 || steps.changes.outputs.commits > 0
        shell: bash
        run: |
          git config --global user.email "dimaslanjaka@gmail.com"
          git config --global user.name "dimaslanjaka"
          arr_variable=("sbg-api" "sbg-server" "sbg-utility" "sbg-cli" "static-blog-generator" "instant-indexing")
          for i in "${arr_variable[@]}"
          do
            git add "packages/${i}/dist" &> /dev/null
            git add "packages/${i}/release" &> /dev/null
            git commit -m "chore: build ${i} from ${{ env.GITHUB_COMMIT_URL }} runner ${{ env.GITHUB_RUNNER_URL }}" &> /dev/null
          done
          # git submodule foreach "git add dist release"
          # git push --recurse-submodules=on-demand
          git push &> /dev/null
        
