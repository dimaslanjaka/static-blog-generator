name: Build Release

# automated packer.js
# repo    : https://github.com/dimaslanjaka/nodejs-package-types/blob/main/.github/workflows/build-release.yml
# raw     : https://raw.githubusercontent.com/dimaslanjaka/nodejs-package-types/main/.github/workflows/build-release.yml
# update  : curl -L https://github.com/dimaslanjaka/nodejs-package-types/raw/main/.github/workflows/build-release.yml > .github/workflows/build-release.yml

on:
  push:
    branches: [ "beta" ]
    paths:
      - '**/src/**'
      - '**/build-release.yml'
      - '**/package-lock.json'
      - '**/package.json'
      - '**/yarn.lock'
      - '**/gulpfile*'
  pull_request:
    types:
      - closed
  workflow_dispatch:

# run single job
concurrency:
  group: build
  cancel-in-progress: true

jobs:
  build:
    strategy:
      fail-fast: true
    env:
      NODE_OPTIONS: "--max-old-space-size=8192"

    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
        with:
          repository: dimaslanjaka/static-blog-generator
          ref: beta
          token: ${{ secrets.ACCESS_TOKEN }}
          submodules: 'recursive'
      - uses: actions/checkout@v3
        name: checkout dist
        with:
          repository: dimaslanjaka/static-blog-generator
          ref: master
          path: dist
          token: ${{ secrets.ACCESS_TOKEN }}
      - uses: actions/checkout@v3
        name: checkout test
        with:
          repository: dimaslanjaka/site
          ref: static-blog-generator
          path: test
          token: ${{ secrets.ACCESS_TOKEN }}
      - run: sh scripts/install-submodules.sh
        name: clone submodules
      - name: Set env
        id: set-env
        shell: bash
        run: |
          echo "GITHUB_SHA_SHORT=$(echo $GITHUB_SHA | cut -c 1-6)" >> $GITHUB_ENV
          echo "GITHUB_BRANCH=${GITHUB_REF#refs/heads/}" >> $GITHUB_ENV
          echo "GITHUB_COMMIT_URL=https://github.com/${{github.repository}}/commit/$(echo $GITHUB_SHA)" >> $GITHUB_ENV
          echo "GITHUB_RUNNER_URL=https://github.com/${{github.repository}}/commit/${{github.sha}}/checks/${{github.run_id}}" >> $GITHUB_ENV
          echo "CACHE_NPM=$(npm config get cache)" >> $GITHUB_ENV
          echo "CACHE_YARN=$(yarn cache dir)" >> $GITHUB_ENV
          echo "CACHE_YARN2=$(yarn config get cacheFolder)" >> $GITHUB_ENV
          echo "cache-npm=$(npm config get cache)" >> $GITHUB_OUTPUT
          echo "cache-yarn=$(yarn cache dir)" >> $GITHUB_OUTPUT
          echo "cache-yarn2=$(yarn config get cacheFolder)" >> $GITHUB_OUTPUT

      - name: Get env
        run: |
          echo "branch      : ${{ env.GITHUB_BRANCH }}"
          echo "commit msg  : ${{ github.event.head_commit.message }}"
          echo "commit hash : ${{ env.GITHUB_SHA_SHORT }}"
          echo "commit url  : ${{ env.GITHUB_COMMIT_URL }}"
          echo "runner url  : ${{ env.GITHUB_RUNNER_URL }}"
          echo "cache npm   : ${{ env.CACHE_NPM }}"
          echo "cache yarn  : ${{ env.CACHE_YARN }}"
          echo "cache yarn2 : ${{ env.CACHE_YARN2 }}"

      - name: Set EOL git configs
        continue-on-error: true
        run: |
          git config core.eol lf
          git config core.autocrlf input
          git checkout-index --force --all

      - uses: actions/setup-node@v3
        with:
          node-version: 18.x
          token: ${{ secrets.GITHUB_TOKEN }}
          architecture: x64
          cache: 'npm'
          cache-dependency-path: '**/package-lock.json'

      - name: Enable corepack
        run: corepack enable

      - uses: pat-s/always-upload-cache@v3.0.11 # actions/cache@v3
        id: cache
        name: get caches
        with:
          path: |
            ${{ steps.set-env.outputs.cache-npm }}
            ${{ steps.set-env.outputs.cache-yarn }}
            ${{ steps.set-env.outputs.cache-yarn2 }}
            **/packages/**/dist/**
            ./packages/sbg-server/src/public
            **/tmp/**
            **/node_modules/**
          key: ${{ runner.os }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-${{ hashFiles('**/package-lock.json') }}
            ${{ runner.os }}-

      - name: Install Global Packages
        run: npm i -g typescript ts-node gulp-cli hexo-cli webpack-cli npm-run-all depcheck lerna husky

      - run: npm install
        continue-on-error: true
        id: install
        name: install root package
      - run: npx lerna exec npm install && lerna link
        id: bootstrap
        continue-on-error: true
        name: bootstrap submodules
      - run:  npx lerna exec npm run update
        id: update
        continue-on-error: true
        name: update
        if: steps.install.outcome != 'success' || steps.bootstrap.outcome != 'success'
      - run: |
          find . -name "tmp" -type d -prune -exec rm -rf '{}' +
          find . -name "node_modules" -type d -prune -exec rm -rf '{}' +
          find . -name "package-lock.json" -exec rm -rf '{}' +;
          npm install
          npx lerna exec npm install && lerna link
        if: steps.update.outcome != 'success'
        shell: bash
        name: clean install

      #- run: npm install --workspaces
      #- run: npm run build --workspaces
      #- run: gulp clean
      - run: npx lerna run build
        id: build
        name: build submodules

      - run: gulp build-copy
        timeout-minutes: 10
        id: build-copy

      - run: gulp install-dist
        id: install-dist
        continue-on-error: true

      - run: |
          find . -name "tmp" -type d -prune -exec rm -rf '{}' +
          find . -name "node_modules" -type d -prune -exec rm -rf '{}' +
          find . -name "package-lock.json" -exec rm -rf '{}' +;
          npm install
          npx lerna exec npm install && lerna link
        if: steps.install-dist.outcome != 'success'
        shell: bash
        working-directory: ./dist

      - run: npx lerna run pack
        id: pack
        name: create tarballs
        if: steps.build.outcome == 'success'

      - name: Git setup user email
        continue-on-error: true
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email '41898282+github-actions[bot]@users.noreply.github.com'

      - name: commit and push ./dist
        continue-on-error: true
        working-directory: ./dist
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email '41898282+github-actions[bot]@users.noreply.github.com'
          git add -A
          git commit -m "Update build from ${{ env.GITHUB_COMMIT_URL }}" -m "commit hash: ${{ env.GITHUB_SHA_SHORT }}" -m "commit url: ${{ env.GITHUB_COMMIT_URL }}" -m "runner: ${{ env.GITHUB_RUNNER_URL }}"
          git push
      - run: git pull -X theirs
        name: Pull before push
        continue-on-error: true
      - name: commit and push
        continue-on-error: true
        run: |
          sh scripts/commit.sh "feat: update build from ${{ env.GITHUB_COMMIT_URL }} runner ${{ env.GITHUB_RUNNER_URL }}"
          git add -A
          git commit -m "Update build from ${{ env.GITHUB_COMMIT_URL }}" -m "commit hash: ${{ env.GITHUB_SHA_SHORT }}" -m "commit url: ${{ env.GITHUB_COMMIT_URL }}" -m "runner: ${{ env.GITHUB_RUNNER_URL }}"
          sh scripts/push.sh
